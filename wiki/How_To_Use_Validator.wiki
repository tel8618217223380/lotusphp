= 系统需求 =
 # 只支持php 5（lotusphp所有组件都要求php5环境）
 # 不要求Web服务器，可运行于命令行下

= 用法 =
== 运行lotus自带的例子 ==
 # 在[http://code.google.com/p/lotusphp/downloads/list?q=Validator]下载最新版本，解压后放到任意目录（如果想通过Web访问，请放到相应的网站目录）
 # 运行example\Validator\simplest\index.php，通过Web访问[http://localhost/lotusphp/example/Validator/simplest/index.php]，或者通过命令行访问都可以
 # 屏幕上打印“Array ( [max_length] => Username is longer than 4 [mask] => 户名只能由数字或字组成 [ban] => 用户名不能包含脏话 ) ”说明运行成功
 * 看一下simplest/index.php的源码能帮助你理解这个示例，他们非常简单，还有中文注释

== 示例1：最简单的用法 ==
{{{
<?php
//加载Validator类文件
include "/Validator所在目录/runtime/Validator/Validator.php";
include "/Validator所在目录/runtime/Validator/ValidatorConfig.php";
include "/Validator所在目录/runtime/Validator/ValidatorDtd.php";
//构造验证规则
$dtd = new LtValidatorDtd("用户名",
    array(
        "max_length" => 4,
        "mask" => "/^[a-z0-9]+$/i",
        "ban" => "/fuck/",
    ),
    array(
        //"max_length" 使用默认的错误消息，在$this->conf->errorMessage里
        "mask" => "户名只能由数字或字组成",
        "ban" => "用户名不能包含脏话"
    )
);

//初始化Validator，执行验证

$validator = new LtValidator;
$username = "fuck my life";
$result = $validator->validate($username, $dtd);
print_r($result);
}}}

== 示例2：在生产环境获取更好的性能 ==
{{{
if ( !apc_fetch('validator_cache_key') )
{
    apc_add( 'validator_cache_key', $dtd );
    //apc_store( 'validator_cache_key', $dtd ); apc_sotre也可以
}

......

$result = $validator->validate($username,apc_fetch('validator_cache_key'));
}}}
关于APC,在Autoloader里已经详细介绍了.当验证项较多的时候,可以采用APC来提高效率.

== 示例3：和lotusphp框架的其它组件一起工作 ==
= Lotus Validator支持的验证方法 =
= 扩展Validator类 =
{{{
class myValidator extends LtValidator
{
    protected function _username_can_be_used($value, $ruleValue = true)
    {
        /*此处定义您自己的数据查询,
         * 如: $result = mysql_query("SELECT id FROM user WHERE username = '$value'") or die("Could not perform select query - " . mysql_error());
         * $num_rows=mysql_num_rows($result);
        */
        $num_rows = 0;//这里仅供测试用
        if ( 0 == $num_rows )
        {
            return true;
        }
    }
}

$dtd = array(
    "label" => "Username",
    "rules" => array(
        "ban" => "/fuck/",
        "username_can_be_used" => "true",
    ),
    "message" => array(
        "ban" => "用户名不能包含脏话",
        "username_can_be_used" => "用户名重复"
    )
);

$validator = new myValidator;
$username = "覃健祥";
$result = $validator->validate($username,$dtd);
var_dump($result);
}}}

{{{
$dtd = new LtValidatorDtd("IP",
    array(
        "is_ip" => true,
    ),
    array(
        "is_ip" => "只能在0~254之间"
    )
);
class myValidator extends LtValidator
{
    protected function _is_ip($value, $ruleValue = true)
    {
        $ips = explode(".", $value);
        $flag = 0;
        for($i=0;$i<4;$i++)
        {
            if ( $ips[$i] < 0 || $ips[$i] > 254 )
            {
                $flag = 1;
            }
        }
        if ( $flag == 1 )
        {
            return false;
        }
        else
        {
            return true;
        }
    }
}

$validator = new myValidator;
$ip = "192.168.1.256";
$result = $validator->validate($ip, $dtd);
print_r($result);
}}}

通过这个示例我们可以看到,想让Validator具有什么样的功能都由您决定.基本上需要改动的很少.需要注意的是LtValidator的每个方法,return true是验证通过的意思.

= 延伸阅读：我们为什么要做Validator =


== Lotus Validator如何解决这些问题 ==

== 常见问题 ==


= 鸣谢 =